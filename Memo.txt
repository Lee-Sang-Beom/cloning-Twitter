1) 인증을 위한 auth 호출. 
   > auth 서비스를 호출하기 위한 객체
   > const auth = getAuth();
   > authService.currentUser() : 로그인 여부에 따라 user 또는 null 반환. 현재 유저가 없으면 null

2) 계정 만들기
   > const data = await createUserWithEmailAndPassword(auth, email, password);

3) 로그인 하기
   > const data = await signInWithEmailAndPassword(auth, email, password);

4) persistence
   > setPersistence : 사용자를 어떻게 기억할지 선택
      - 기본값 local : 브라우저를 닫더라도 사용자 정보 기억
      - session : 브라우저가 열린 동안만 기억
      - none : 유저정보를 기억 x

5) onAuthStateChanged() : 사용자 로그인상태 변화를 관찰하는 관찰자 (변화를 알아차림)

  useEffect(()=>{
    authService.onAuthStateChanged((user) =>{
      if(user){
        setIsLoggedIn(true); > 로그인되어있다면 
      }else{
        setIsLoggedIn(false); > 로그인 되어있지 않다면
      }
      setInit(true); // init이 false면 아래 AppRouter 숨김
    });
    
  }, [])


6) const provider = new GoogleAuthProvider(); // provider가 구글이 됨 (제공자)
   const provider = new GithubAuthProvider();

   const data = signInWithPopup(authService, provider); // 인증서비스 객체와 provider 객체로 인해 로그인팝업창 띄움

7) authService.signOut(); // 로그아웃

8) <Redirce from = "*" t0 = "/"/> : "/" route 밖으로 이동하면 여기 "/"로 돌아가라(redirect) 라는 뜻

9) const docRef = await addDoc(collection(dbService, "sweets"),{
            sweet : sweet, // sweet는 document의 key가 될 것임
            createdAt : Date.now()
        });

        setSweet("");
   - promise를 리턴하므로 await, async 적용 
   - addDoc : 콜렉션에 add할것임
   - collection : firebase의 firestore서비스인 dbservice로 sweet 컬렉션 만듬
   - "sweets" : 경로
   - data : 해당 데이터를 담은 새로운 document를 collection에 추가. document id를 자동으로 부여하면서 말임


10) 
    const getSweets = async() => {
        const dbsweets = await getDocs(collection(dbService, "sweets"));
        // dbservice를 불러와서 "sweets" 콜렉션의 값을 getDocs로 다 가져옴
           리턴하는 것은 querysnapshot 반환
        dbsweets.forEach(document => console.log(document.data()));
    }

11) onSnapshot(collection(dbService, "sweets"),snapshot =>{
            console.log("something happened");
        })

    - realtime으로 만들 수 있음.
    - onsnapshot은 db변화를 실시간으로 알려줌.
    - 내가 무언가를 하게 될 때 console 출력, 읽어들일때 쓸때 삭제할때 업데이트할때 발생



   11-1) 이거를 써도됨 :foreach 사용방법

   const getSweets = async() => {
        const dbsweets = await getDocs(collection(dbService, "sweets"));
        dbsweets.forEach(document => {
            const sweetObj = {
                ...document.data(), // 데이터의 내용물을 가져와 풀어놓음
                id : document.id, // 맵할당시, key부여하기 위한 용도
                
            };
            setSweets((prev) => [sweetObj, ...prev]);
        });
    }
    useEffect(()=>{
        getSweets(); // 컴포넌트가 마운트 될때마다 getSweets 호출
        
        onSnapshot(collection(dbService, "sweets"),snapshot =>{
            console.log("something happened"); 
            // dbservice를 이용해 sweets 컬렉션의 변화를 실시간으로 확인. 
        })
    },[])

   11-2) 이거를 써도됨 : 이게 더 적게 렌더링. array를 만들고 setsweet
   useEffect(()=>{        
        onSnapshot(collection(dbService, "sweets"),snapshot =>{
            const sweetArray = snapshot.docs.map((doc) => ({
                id : doc.id,
                ...doc.data(),
            }));

            console.log(sweetArray);
            // dbservice를 이용해 sweets 컬렉션의 변화를 실시간으로 확인. 변화발생 때 마다 console.log
        })
    },[])


12) const onDeleteClick = async() =>{
        const ok = window.confirm("Are you sure you want to delete this sweet?");
        if(ok){
            await deleteDoc(doc(dbService, "sweets", `${sweetObj.id}`)); // 삭제하는 부분. 세번째파라미터는 sweets콜렉션의 어떤 document를 삭제하는가 의 경로같은 것
        }
    }

13) updateDoc(doc(dbService, "sweets", `${sweetObj.id}`),{
            text : newSweet 
            // 12번과 같이, 지정 콜렉션의 documnet 객체인 doc를 만들고, 
               해당 doc에 접근해 두번째파라미터로 내용 중  바꿀내용 지시
        })

14) const onFileChange = (event) =>{
        const {target : {files}} = event; // input event에서 target.files을 가져옴
        const file = files[0]; 
        
        const reader = new FileReader(); // fileReader api 사용하여 reader만듬
        reader.onloadend = (finishedEvent) => { // reader 이벤트가 발생 후 끝나면 실행
            const result = finishedEvent.currentTarget.result;
            // const {currentTarget : {result}} = finishedEvent;
            // 이 result는 브라우저에 복붙하면 이미지가 표시됨
            setImgFileString(result);
        }
        reader.readAsDataURL(file); //readasdataurl로 파일을 읽고, 이게 '끝나면' 위의 onloadend 이벤트 리스너가 발동됨 
        
    }

15)     const onSubmit = async(event) =>{
        event.preventDefault();
        

        const fileRef = ref(storageService, `${userObj.uid}/${v4()}`);
        /* Cloud Storage에 파일을 업로드하려면 
           우선 파일 이름을 포함하여 파일의 전체 경로를 가리키는 참조를 만듭니다.
        (파일에 대한 reference를 만듬.)

        폴더를 만듬. ${userobj.uid} > 유저 아이디를 이용하여 폴더이름 생성
        사진에 이름을 줌. > v4()는 랜덤으로 특별한 식별자를 랜덤 생성 */

        const response = await uploadString(fileRef, imgFileString, 'data_url');
        /*
         uploadString() 메서드를 사용하여 원시 문자열, base64, base64url 
         또는 data_url로 인코딩된 문자열을 Cloud Storage에 추가할 수 있습니다.

         1. 앞서만든 파일 이름을 포함한 파일의 전체경로를 가리킬 수 있는 참조 변수
         2. 데이터 (파일 스트링)
         3. 데이터 포맷 (format) >> 'data_url' >> readAsDataURL한것을 여기서 사용하는 거임
        */
        
        console.log(response);
        // await addDoc(collection(dbService, "sweets"),{ // collection = sweets
        //     text : sweet, // sweet는 document의 key가 될 것임
        //     createdAt : Date.now(),
        //     createrId : userObj.uid,
        // });

        setSweet("");
    }

16) 이미지 다운로드가 가능한 url download 주소
    await getDownloadURL(response.ref)

        const onSubmit = async(event) =>{
        event.preventDefault();
        let fileUrl = "";

        if(imgFileString != ""){
            const fileRef = ref(storageService, `${userObj.uid}/${v4()}`);
            const response = await uploadString(fileRef, imgFileString, 'data_url');
            fileUrl = await getDownloadURL(response.ref);
        }

        const sweetObj = {
            text : sweet, 
            createdAt : Date.now(),
            createrId : userObj.uid,
            fileUrl,
        }

        await addDoc(collection(dbService, "sweets"),sweetObj);

        setSweet("");
        setImgFileString("");
    }

17) storage에 있는 이미지 삭제하기
const onDeleteClick = async() =>{
        const ok = window.confirm("Are you sure you want to delete this sweet?");
        if(ok){
            await deleteDoc(doc(dbService, "sweets", `${sweetObj.id}`));
            /* 만약 fileurl을 firebase의 storageservice와의 레퍼런스로 만들고 이를 deleteobject에 넣어주면,
               firebase는 우리 storage안에서 이 reference를 찾아 제거
            */
           if(sweetObj.fileUrl !== ""){
                deleteObject(ref(storageService, sweetObj.fileUrl));
           }
            
        }
    }

18) query 쓰는 방법 알기

    const getMySweets = async() => { // 우리가 어떤유저의 sweet (text 등을)을 불러와야하는 지 암. userobj으로
        const q = query(collection(dbService, "sweets")
        ,where("createrId", "==", `${userObj.uid}`)
        ,orderBy("createdAt"));
         
         // where은 createrid와 userobj.uid가 같은 것만 골라오는 것. 이걸 필터링
         // orderby는 createdat을 기준으로 순서대로 정렬 > 에러생김. > index 복합색인을 에러따라 만들어줘야함

        const sweets = await getDocs(q); // 얻어오기 (get함수)
        console.log(sweets.docs.map((doc)=>doc.data())); // 출력하기

    }

19) const onSubmit = async(event) =>{
        event.preventDefault();
        if(userObj.displayName !== newDisplayName){ 이름 변경이 이루어지면, 
            await updateProfile(userObj, { displayName: newDisplayName }); userobj.displayname 속성값을 저거로 바꿈
        }
        refreshUser();
    }

20) const refreshUser=() =>{ 
    //우리가 원하는 firebase의 특정부분만을 가져와서 react에게 줄수있음

    const user = authService.currentUser;
    setUserObj({ // userobj를 설정할때 엄청많은 전체를 설정하는게 아니라 변경될 것 같은 부분만 수정
      displayName : user.displayName,
      uid : user.uid,
      updateProfile : (args) => updateProfile(args),
      // arg를 이용해 리턴값으로 진짜 user.updateprofile을 보내줌. 단, 
    })


    ( app.js )
      useEffect(()=>{
    authService.onAuthStateChanged((user) =>{
      if(user){
        setIsLoggedIn(true);
        setUserObj({ // userobj를 설정할때 엄청많은 전체를 설정하는게 아니라 변경될 것 같은 부분만 수정

           displayName : user.displayName,
           uid : user.uid,
           updateProfile : (args) => updateProfile(args),
          // arg를 이용해 리턴값으로 진짜 user.updateprofile을 보내줌. 단, 
        });
      }else{
        setIsLoggedIn(false);
      }
      setInit(true); // init이 false면 아래 AppRouter 숨김
    });
  }, [])

   >> 2번째 방법은 refreshUser에 이 문구를 넣는것

     setUserObj(Object.assign({},user));
     1) object.assign 은 target과 source가 요구됨
        기본적으로 빈 object와 source가 요구됨

     2) 빈 object안에 원래 user의 사본이 새 object형태로 생성됨.
        이때 react가 새 object가 생성되었구나 하고 재렌더링 하는것. 
        (1번째 방법도 마찬가지로 object의 변경점을 보내줬기 때문에 재렌더링되는것임)